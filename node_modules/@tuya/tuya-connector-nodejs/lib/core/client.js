"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TuyaOpenApiClient = void 0;
var crypto_1 = __importDefault(require("crypto"));
var axios_1 = __importDefault(require("axios"));
var tuyaTokenStore_1 = require("./tuyaTokenStore");
/**
 * TuyaContext.
 */
var TuyaOpenApiClient = /** @class */ (function () {
    function TuyaOpenApiClient(opt) {
        this.baseUrl = opt.baseUrl;
        this.accessKey = opt.accessKey;
        this.secretKey = opt.secretKey;
        this.store = opt.store || new tuyaTokenStore_1.MemoryStore();
        this.rpc = opt.rpc || axios_1.default;
    }
    TuyaOpenApiClient.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var t, headers, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t = Date.now().toString();
                        return [4 /*yield*/, this.getHeader(t, true)];
                    case 1:
                        headers = _a.sent();
                        return [4 /*yield*/, this.rpc({
                                url: this.baseUrl + "/v1.0/token?grant_type=1",
                                method: 'GET',
                                headers: headers,
                            })];
                    case 2:
                        data = (_a.sent()).data;
                        if (!data.success) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.store.setTokens(data.result)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, data];
                    case 4: throw new Error("GET_TOKEN_FAILED " + data.code + ", " + data.msg);
                }
            });
        });
    };
    TuyaOpenApiClient.prototype.refreshToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var t, refreshToken, api, headers, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        t = "" + Date.now();
                        return [4 /*yield*/, this.store.getRefreshToken()];
                    case 1:
                        refreshToken = _a.sent();
                        api = this.baseUrl + "/v1.0/token/" + refreshToken;
                        return [4 /*yield*/, this.getHeader(t, true)];
                    case 2:
                        headers = _a.sent();
                        return [4 /*yield*/, this.rpc.request({
                                url: api,
                                method: 'GET',
                                headers: headers,
                            })];
                    case 3:
                        data = (_a.sent()).data;
                        if (!!data.success) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.init()];
                    case 4:
                        data = _a.sent();
                        _a.label = 5;
                    case 5: return [4 /*yield*/, this.store.setTokens(data.result)];
                    case 6:
                        _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * 请求开放平台接口
     *
     * @param path    接口路径
     * @param method  Http方法
     * @param query   可选参数
     * @param body    可选参数
     * @param headers 可选请求头
     * @param retry   失败是否重试一次，默认true
     */
    TuyaOpenApiClient.prototype.request = function (_a) {
        var path = _a.path, method = _a.method, query = _a.query, body = _a.body, headers = _a.headers, _b = _a.retry, retry = _b === void 0 ? true : _b;
        return __awaiter(this, void 0, void 0, function () {
            var t, reqHeaders, param, res;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        t = Date.now().toString();
                        return [4 /*yield*/, this.getHeader(t, false)];
                    case 1:
                        reqHeaders = _c.sent();
                        param = {
                            url: "" + this.baseUrl + path,
                            method: method,
                            params: query,
                            data: body,
                            headers: Object.assign(reqHeaders, headers),
                        };
                        return [4 /*yield*/, this.rpc.request(param)];
                    case 2:
                        res = _c.sent();
                        if (!(retry && !res.data.success && res.data.code === 1010)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.refreshToken()];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, this.request({ path: path, method: method, query: query, body: body, headers: headers, retry: false })];
                    case 4:
                        res = _c.sent();
                        _c.label = 5;
                    case 5: return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * refreshSign. 计算刷新 token 的签名
     *
     * @param {string} t 时间戳, 毫秒级
     * @returns {string} 刷新 token 的签名
     */
    TuyaOpenApiClient.prototype.refreshSign = function (t) {
        var str = "" + this.accessKey + t;
        return this.sign(str, this.secretKey);
    };
    TuyaOpenApiClient.prototype.requestSign = function (t) {
        return __awaiter(this, void 0, void 0, function () {
            var accessToken, str;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.store.getAccessToken()];
                    case 1:
                        accessToken = _a.sent();
                        if (!!accessToken) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.init()];
                    case 2:
                        _a.sent(); // 未获取到 accessToke 时, 重新初始化
                        return [4 /*yield*/, this.store.getAccessToken()];
                    case 3:
                        accessToken = _a.sent();
                        _a.label = 4;
                    case 4:
                        str = "" + this.accessKey + accessToken + t;
                        return [2 /*return*/, this.sign(str, this.secretKey)];
                }
            });
        });
    };
    TuyaOpenApiClient.prototype.sign = function (str, secret) {
        return crypto_1.default
            .createHmac('sha256', secret)
            .update(str, 'utf8')
            .digest('hex')
            .toUpperCase();
    };
    TuyaOpenApiClient.prototype.getHeader = function (t, forRefresh) {
        if (forRefresh === void 0) { forRefresh = false; }
        return __awaiter(this, void 0, void 0, function () {
            var sign, _a, accessToken;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!forRefresh) return [3 /*break*/, 1];
                        _a = this.refreshSign(t);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.requestSign(t)];
                    case 2:
                        _a = _b.sent();
                        _b.label = 3;
                    case 3:
                        sign = _a;
                        return [4 /*yield*/, this.store.getAccessToken()];
                    case 4:
                        accessToken = _b.sent();
                        return [2 /*return*/, {
                                client_id: this.accessKey,
                                t: t,
                                sign_method: "HMAC-SHA256",
                                sign: sign,
                                access_token: accessToken || '',
                            }];
                }
            });
        });
    };
    return TuyaOpenApiClient;
}());
exports.TuyaOpenApiClient = TuyaOpenApiClient;
exports.default = TuyaOpenApiClient;
//# sourceMappingURL=client.js.map